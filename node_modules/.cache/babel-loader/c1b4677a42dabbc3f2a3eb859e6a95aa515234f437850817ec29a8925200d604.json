{"ast":null,"code":"//导入依赖中的包 axios，进行发送请求使用\nimport axios from 'axios';\n\n// 创建axios实例,类似 java 中的封装，工具类\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  //从文件， .env.development 中进行获取值\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 请求超时时间,10s\n  timeout: 10000\n});\n\n//响应拦截器，对返回的 res 进行处理\nservice.interceptors.response.use(res => {\n  return res.data;\n});\n\n//将 service 导出去，给其他文件进行使用\nexport default service;","map":{"version":3,"names":["axios","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","response","use","res","data"],"sources":["F:/Java/Ruoyi-Vue/xxjs/test/ruoyi_ui/ruoyi_ui/src/utils/request.js"],"sourcesContent":["//导入依赖中的包 axios，进行发送请求使用\r\nimport axios from 'axios'\r\n\r\n// 创建axios实例,类似 java 中的封装，工具类\r\nconst service = axios.create({\r\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\r\n  //从文件， .env.development 中进行获取值\r\n  baseURL: process.env.VUE_APP_BASE_API,\r\n  // 请求超时时间,10s\r\n  timeout: 10000\r\n})\r\n\r\n//响应拦截器，对返回的 res 进行处理\r\nservice.interceptors.response.use(res => {\r\n  return res.data\r\n})\r\n\r\n//将 service 导出去，给其他文件进行使用\r\nexport default service\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3B;EACA;EACAC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB;EACrC;EACAC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAN,OAAO,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACC,GAAG,IAAI;EACvC,OAAOA,GAAG,CAACC,IAAI;AACjB,CAAC,CAAC;;AAEF;AACA,eAAeX,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}